---
- name: set some required instance facts
  set_fact:
    config_vm: "{{ item.config_vm|default(true) }}"
    vm_user: "{{ item.user|default(lookup('env','USER')) }}"
    img_path: "{{ molecule_yml.driver.images_path }}/mlcl-{{ item.name }}.qcow2"
    selinux_relabel: "{{ item.selinux_relabel|default(false) }}"
    ssh_pub: "{{ item.ssh_pub_path|default(molecule_yml.driver.ssh_pub_path)|
      default(lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
    root_pass: "{{ item.become_pass|default(lookup('password','/dev/null 
      length=16 chars=ascii_letters')) }}"
    down_path: "{{ molecule_yml.driver.download_path|default(lookup('env','HOME')) }}"

- name: check if the instance image exists
  stat:
    path: "{{ img_path }}"
  register: img_stat

- name: create the instance
  block:
    - name: deal with a URL given as base image
      block:
        - name: check if image was already downloaded
          stat:
            path: "{{ down_path }}/{{ item.base_image|basename }}"
          register: down_stat

        - name: download base image
          get_url:
            url: "{{ item.base_image }}"
            dest: "{{ down_path }}" 
          when: not down_stat.stat.exists

        - name: make a copy of the base image to use with this instance
          synchronize:
            src: "{{ down_path }}/{{ item.base_image|basename }}"
            dest: "{{ img_path }}"
      when: item.base_image|regex_search('^http')

    - name: make a copy of the base image to use with this instance
      synchronize:
        src: "{{ item.base_image }}"
        dest: "{{ img_path }}"
      when: not item.base_image|regex_search('^http')

    - name: configure instance image
      shell: >
        virt-customize -a {{ img_path }} 
        --run-command 'mkdir -p /etc/cloud && touch 
        /etc/cloud/cloud-init.disabled && useradd 
        -m {{ vm_user }} && ssh-keygen -A' 
        --ssh-inject {{ vm_user }}:file:{{ ssh_pub }} 
        --root-password password:{{ root_pass }}
      register: virt_cust
      when: config_vm
      no_log: true
      
    - name: run selinux-relabel
      shell: "virt-customize -a {{ img_path }} --selinux-relabel"
      when: selinux_relabel

    - name: create the instace
      virt:
        name: "mlcl-{{ item.name }}"
        command: define
        xml: "{{ lookup('template', 'vm.xml.j2') }}"
  when: not img_stat.stat.exists

- name: ensure the instance is running
  virt:
    name: "mlcl-{{ item.name }}"
    state: running

- name: get the IP
  shell: "virsh domifaddr mlcl-{{ item.name }} | grep ipv4 | awk '{print $4}'"
  register: ip_out
  until: ip_out.stdout_lines|length > 0
  delay: 3
  retries: 100
  changed_when: false
  environment:
    LIBVIRT_DEFAULT_URI: "qemu:///system"

- name: wait until the instance can be reached over SSH
  wait_for:
    delay: 0
    sleep: 3
    port: 22
    host: "{{ ip_out.stdout_lines[0][:-3] }}"
    search_regex: OpenSSH

- name: create the basic instance hash
  set_fact:
    instance_dict: "{{ instance_dict|default({})|combine({
      'user':vm_user,
      'instance':item.name,
      'address':ip_out.stdout_lines[0][:-3],
      'port':item.port|default('22'),
      'identity_file':item.id_file|default(
         lookup('env','HOME') + '/.ssh/id_rsa') })}}"

- name: include become details in hash
  set_fact:
    instance_dict: "{{ instance_dict|combine({
      'become_method':item.become_method|
         default(molecule_yml.driver.become_method)|default('su'),
      'become_pass':root_pass })}}"
  when: config_vm or item.become_method is defined or item.become_pass is defined
  no_log: true

- name: add instance hash to main instances dictionary
  set_fact:
    instance_conf_dict: "{{ instance_conf_dict|default([]) + [ instance_dict ] }}"
